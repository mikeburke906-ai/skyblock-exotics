
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Public read for listings/reviews/reports/payouts/games; writes require auth
    match /listings/{id} {
      allow read: if true;
      allow create: if request.auth != null && request.resource.data.sellerUid == request.auth.uid;
      allow delete, update: if request.auth != null && resource.data.sellerUid == request.auth.uid;
    }

    match /games/{id} {
      allow read: if true;
      allow create, update: if request.auth != null;
    }

    match /userProfiles/{uid} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == uid;
    }

    match /reports/{id} {
      allow read: if true;
      allow create: if request.auth != null;
    }

    match /reviews/{id} {
      allow read: if true;
      allow create: if request.auth != null;
    }

    match /payouts/{id} {
      allow read: if true;
      allow create: if request.auth != null;
    }

    // Wallet: users can read their own balance; only admins can modify
    match /balances/{uid} {
      allow read: if request.auth != null && request.auth.uid == uid;
      allow write: if request.auth != null && exists(/databases/$(database)/documents/admins/$(request.auth.uid)) && get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.enabled == true;
    }

    // Transfers/audit log: readable by owner + admins; write by admins only
    match /transfers/{id} {
      allow read: if request.auth != null && (resource.data.uid == request.auth.uid || (exists(/databases/$(database)/documents/admins/$(request.auth.uid)) && get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.enabled == true));
      allow create: if request.auth != null && exists(/databases/$(database)/documents/admins/$(request.auth.uid)) && get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.enabled == true;
    }

    // Deposit requests: user create; admins update
    match /depositRequests/{id} {
      allow create: if request.auth != null && request.resource.data.uid == request.auth.uid;
      allow read: if request.auth != null && (resource.data.uid == request.auth.uid || (exists(/databases/$(database)/documents/admins/$(request.auth.uid)) && get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.enabled == true));
      allow update: if request.auth != null && exists(/databases/$(database)/documents/admins/$(request.auth.uid)) && get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.enabled == true;
    }

    // Admin whitelist
    match /admins/{uid} {
      allow read: if request.auth != null && request.auth.uid == uid;
      // An admin must bootstrap this via server/console
      allow write: if false;
    }

    // Threads & messages (DMs)
    match /threads/{id} {
      allow read, update: if request.auth != null && request.resource.data.participants.hasAny([request.auth.uid]);
      allow create: if request.auth != null && request.resource.data.participants.hasOnly([request.auth.uid, request.resource.data.participants[1]]);
    }
    match /messages/{id} {
      allow read, create: if request.auth != null &&
        exists(/databases/$(database)/documents/threads/$(request.resource.data.threadId)) &&
        get(/databases/$(database)/documents/threads/$(request.resource.data.threadId)).data.participants.hasAny([request.auth.uid]);
    }

    // House seeds
    match /house/{id} {
      allow read: if true;
      allow write: if request.auth != null && exists(/databases/$(database)/documents/admins/$(request.auth.uid)) && get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.enabled == true;
    }
  }
}
